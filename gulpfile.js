// Require packages from node_modules.
const gulp = require('gulp'),
      sass = require('gulp-sass'),
      sassLint = require('gulp-sass-lint'),
      sourcemaps = require('gulp-sourcemaps'),
      autoprefixer = require('gulp-autoprefixer'),
      browserify = require('browserify'),
      fs = require('fs'),
      jsonSass = require('json-sass'),
      handlebars = require('handlebars'),
      gulpHandlebars = require('gulp-handlebars-html')(handlebars),
      notifier = require('node-notifier'),
      rename = require('gulp-rename'),
      del = require('del'),
      buffer = require('vinyl-buffer'),
      source = require('vinyl-source-stream'),
      browserSync = require('browser-sync').create();


// File paths to source and destination files.
const paths = {
  src: {
    html: './src/views',
    partials: './src/views/partials',
    sass: './src/sass',
    js: './src/js',
    img: './src/img'
  },
  dest : {
    dest: './dist',
    html: './dist',
    css: './dist/css',
    js: './dist/js',
    img: './dist/img',
    partials: './src/views/partials'
  }
};


// Serve/default task. Starts browserSync and some watch tasks.
gulp.task('serve', ['clean', 'json-sass', 'css', 'js', 'images', 'html'], () => {
  browserSync.init({
    server: {
      baseDir: paths.dest.dest,
      serveStaticOptions: {
        extensions: ['html']
      }
    }
  });
  gulp.watch(`${paths.src.sass}/**/*.scss`, ['css']);
  gulp.watch(`${paths.src.js}/**/*.{js,json}`, ['js']);
  gulp.watch(`${paths.src.img}/**/*.{png,jpg,svg}`, ['images']);
  gulp.watch(`${paths.src.html}/**/*.{html,hbs}`, ['html']);
});


// Build CSS from SASS with autoprefixer and sourcemaps. Runs SASS Lint first.
gulp.task('css', ['sasslint'], () => {
  return gulp.src(`${paths.src.sass}/**/*.scss`)
    .pipe(sourcemaps.init())
    .pipe(sass({outputStyle: 'expanded'})
    .on('error', function(err) {
      sass.logError.call(this, err);
      notifier.notify({
        title: 'Gulp',
        message: 'SASS error'
      });
    }))
    .pipe(autoprefixer({
      browsers: ['last 2 versions']
    }))
    .pipe(sourcemaps.write())
    .pipe(gulp.dest(paths.dest.css))
    .pipe(browserSync.stream());
});


// Lint our SASS. Called by the CSS task and will not build if there are errors.
gulp.task('sasslint', () => {
  return gulp.src(`${paths.src.sass}/**/*.scss`)
    .pipe(sassLint())
    .pipe(sassLint.format())
    .pipe(sassLint.failOnError())
    .on('error', () => {
      notifier.notify({
        title: 'Gulp',
        message: 'SASS liniting failed'
      });
    });
});


// Build our JavaScript with Browserify and sourcemaps.
gulp.task('js', () => {
  return browserify({entries: `${paths.src.js}/app.js`, extensions: ['.js'], debug: true})
    .bundle()
    .pipe(source('app.js'))
    .pipe(buffer())
    .pipe(sourcemaps.write())
    .pipe(gulp.dest(paths.dest.js))
    .pipe(browserSync.stream());
});


// Generate a scss partial containing a map from the specified json file.
// Don't botther with this task unless you need media queries in JavaScript.
gulp.task('json-sass', () => {
  return fs.createReadStream(`${paths.src.js}/data/_media-queries.json`)
    .pipe(jsonSass({
      prefix: '$media-queries: '
    }))
    .pipe(source(`${paths.src.js}/data/_media-queries.json`))
    .pipe(rename('_media-queries.scss'))
    .pipe(gulp.dest(`${paths.src.sass}/settings/`));
});


// Copy images from source to destination. In production you probably want to optimise images.
gulp.task('images', () => {
  return gulp.src(`${paths.src.img}/**/*`)
    .pipe(gulp.dest(`${paths.dest.img}`))
    .pipe(browserSync.stream());
});


// Build our HTML from handlebars templates.
gulp.task('html', () => {
  const options = {
    partialsDirectory: paths.src.partials,
    allowedExtensions: ['hbs', 'html']
  };
  return gulp.src([`${paths.src.html}/**/*{hbs, html}`, `!${paths.src.partials}/**/*{hbs, html}`])
    .pipe(gulpHandlebars(null, options))
    .pipe(rename((path) => {
      path.extname = '.html';
    }))
    .pipe(gulp.dest(paths.dest.dest))
    .pipe(browserSync.stream());
});


// Delete generated files. The whole 'dest' folder and the media queries SASS partial (generated by 'json-sass').
gulp.task('clean', () => {
  return del.sync([paths.dest.dest, `${paths.src.sass}/settings/_media-queries.scss`]);
});


// Default task: on 'gulp', start the 'serve' task.
gulp.task('default', ['serve']);
